#include<iostream>
#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int value;
    Node* next;

    // constructor:a method automtically called when an obj of a class is created
    Node(int x)
    {
        value=x;
        next=NULL;
    }
};

int main(){
    // Node* head= new Node(10);
    // Node* temp1= new Node(20);
    // Node* temp2= new Node(30);

    // head->next=temp1;
    // temp1->next=temp2;

    Node* head= new Node(100);
    head->next=  new Node(200);
    head->next->next=  new Node(500);

    cout<<head->value<<" -->"<<head->next->value<<" -->"<<head->next->next->value;
    // cout<<temp1->value<<" -->"<<temp1->next->value;
    // cout<<temp2->value<<" -->"<<temp2->next->value;
    
    return 0;
}








#include<iostream>
#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int value;
    Node* next;

    // constructor:a method automtically called when an obj of a class is created
    Node(int x)
    {
        value=x;
        next=NULL;
    }
};

int main(){
    // Node* head= new Node(10);
    // Node* temp1= new Node(20);
    // Node* temp2= new Node(30);

    // head->next=temp1;
    // temp1->next=temp2;

    Node* head= new Node(100);
    head->next=  new Node(200);
    head->next->next=  new Node(500);

    cout<<head->value<<" -->"<<head->next->value<<" -->"<<head->next->next->value;
    // cout<<temp1->value<<" -->"<<temp1->next->value;
    // cout<<temp2->value<<" -->"<<temp2->next->value;
    
    return 0;
}








#include<iostream>
#include<bits/stdc++.h>
using namespace std;

struct Node
{
    int value;
    Node* next;

    // constructor:a method automtically called when an obj of a class is created
    Node(int x)
    {
        value=x;
        next=NULL;
    }
};

int main(){
    // Node* head= new Node(10);
    // Node* temp1= new Node(20);
    // Node* temp2= new Node(30);

    // head->next=temp1;
    // temp1->next=temp2;

    Node* head= new Node(100);
    head->next=  new Node(200);
    head->next->next=  new Node(500);

    cout<<head->value<<" -->"<<head->next->value<<" -->"<<head->next->next->value;
    // cout<<temp1->value<<" -->"<<temp1->next->value;
    // cout<<temp2->value<<" -->"<<temp2->next->value;
    
    return 0;
}








